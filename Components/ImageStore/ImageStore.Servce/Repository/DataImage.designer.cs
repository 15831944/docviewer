using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using ImageStore.Services.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageStore.Services.Repository
{
    [Database(Name="imagestore")]
	public partial class DataImageDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertImages(Images instance);
    partial void UpdateImages(Images instance);
    partial void DeleteImages(Images instance);
    #endregion
		
		public DataImageDataContext() : 
				base(Settings.Default.imagestoreConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataImageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataImageDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataImageDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataImageDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Images> Images
		{
			get
			{
				return this.GetTable<Images>();
			}
		}
	}
	
	[Table(Name="dbo.Images")]
	public partial class Images : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private Guid _Id;
		
		private string _Name;
		
		private string _ThumbUrl;
		
		private string _ImageUrl;
		
		private string _CompressUrl;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnThumbUrlChanging(string value);
    partial void OnThumbUrlChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnCompressUrlChanging(string value);
    partial void OnCompressUrlChanged();
    #endregion
		
		public Images()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbUrl", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string ThumbUrl
		{
			get
			{
				return this._ThumbUrl;
			}
			set
			{
				if ((this._ThumbUrl != value))
				{
					this.OnThumbUrlChanging(value);
					this.SendPropertyChanging();
					this._ThumbUrl = value;
					this.SendPropertyChanged("ThumbUrl");
					this.OnThumbUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_CompressUrl", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string CompressUrl
		{
			get
			{
				return this._CompressUrl;
			}
			set
			{
				if ((this._CompressUrl != value))
				{
					this.OnCompressUrlChanging(value);
					this.SendPropertyChanging();
					this._CompressUrl = value;
					this.SendPropertyChanged("CompressUrl");
					this.OnCompressUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
